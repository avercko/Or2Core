@using Orchard.OpenId.ViewModels
@using Orchard.OpenId.Settings;
@using System.Security.Cryptography.X509Certificates
@model OpenIdSettingsViewModel

    <fieldset class="form-group" asp-validation-class-for="TestingModeEnabled">
        <div class="form-check">
            <label class="form-check-label">
                <!--There is a known bug with collapse in Bootstrap v4.0.0-alpha.5  https://github.com/twbs/bootstrap/pull/21019 it will be fixed when we upgrade to v4.0.0-alpha.6 -->
                <a data-toggle="collapse" href="#certArea" class="a-unstyled">
                    <input asp-for="TestingModeEnabled" class="form-check-input" />@T["Enable Testing Mode"]
                </a>
            </label>
        </div>
        <span class="hint">@T["Disables https requirement and uses an ephemeral signing key."]</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="AccessTokenFormat">
        <label asp-for="AccessTokenFormat">@T["Token Format"] <span asp-validation-for="AccessTokenFormat"></span></label>
        <select asp-for="AccessTokenFormat" class="form-control">
            @foreach (OpenIdSettings.TokenFormat format in Enum.GetValues(typeof(OpenIdSettings.TokenFormat)))
            {
                <option value="@format" selected="@(Model.AccessTokenFormat == format)">@format.ToString()</option>
            }
        </select>
        <span class="@("hintAccessTokenFormat hint" + (Model.AccessTokenFormat == OpenIdSettings.TokenFormat.JWT ? "" : " collapse"))" id="Hint_JWT">@T["If you are using a self-signed certificate for SSL keep in mind JWT requires the client has the SSL certificate registered as a trusted certificate."]</span>
        <span class="@("hintAccessTokenFormat hint" + (Model.AccessTokenFormat == OpenIdSettings.TokenFormat.Encrypted ? "" : " collapse"))" id="Hint_Encrypted">@T["Encrypted format relies on .Net Data Protection API. It allows the use of a self-signed certificate for SSL without needing it to be registered as trusted in the client."]</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="Authority">
        <label asp-for="Authority">@T["Authority"] <span asp-validation-for="Authority"></span></label>
        <input asp-for="Authority" class="form-control" />
        <span class="hint">@T["The base url of the identity server (this site). In production this base url have to use https schema. Recommended Value:"] @Model.SslBaseUrl</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="Audiences">
        <label asp-for="Audiences">@T["Audiences"] <span asp-validation-for="Audiences"></span></label>
        <input asp-for="Audiences" class="form-control" />
        <span class="hint">@T["Base urls sepparated by commas of the resource servers for which this identity server issues tokens. If you are providing tokens for accessing resources on this site Audiences should be equal to Authority url. In production those urls should use https schema."]</span>
    </fieldset>

    <div id="certArea" class="@(Model.TestingModeEnabled ? "collapse" : "")">
        <fieldset class="form-group" asp-validation-class-for="CertificateStoreLocation">
            <label asp-for="CertificateStoreLocation">@T["Certificate Store Location"] <span asp-validation-for="CertificateStoreLocation"></span></label>
            <select asp-for="CertificateStoreLocation" class="form-control">
                @foreach (StoreLocation location in Enum.GetValues(typeof(StoreLocation)))
                {
                    <option value="@location" selected="@(Model.CertificateStoreLocation == location)">@location.ToString()</option>
                }
            </select>
            <span class="hint">@T["Select the certificate location."]</span>
        </fieldset>

        <fieldset class="form-group" asp-validation-class-for="CertificateStoreName">
            <label asp-for="CertificateStoreName">@T["Certificate Store Name"] <span asp-validation-for="CertificateStoreName"></span></label>
            <select asp-for="CertificateStoreName" class="form-control">
                @foreach (StoreName store in Enum.GetValues(typeof(StoreName)))
                {
                    <option value="@store" selected="@(Model.CertificateStoreName == store)">@store.ToString()</option>
                }
            </select>
            <span class="hint">@T["Select the certificate store."]</span>
        </fieldset>

        <fieldset class="form-group" asp-validation-class-for="CertificateThumbPrint">
            @if (Model.AvailableCertificates.Any())
            {

                <label asp-for="CertificateThumbPrint">@T["Certificate"] <span asp-validation-for="CertificateThumbPrint"></span></label>
                <select asp-for="CertificateThumbPrint" class="form-control">
                    @foreach (var certificate in Model.AvailableCertificates)
                    {
                        var selectedCertificate = Model.CertificateThumbPrint == certificate.ThumbPrint
                                                   && Model.CertificateStoreLocation.HasValue && Model.CertificateStoreLocation.Value == certificate.StoreLocation
                                                   && Model.CertificateStoreName.HasValue && Model.CertificateStoreName == certificate.StoreName;
                        if (string.IsNullOrWhiteSpace(certificate.ThumbPrint))
                        {
                            <option value="" data-StoreLocation="@certificate.StoreLocation" data-StoreName="@certificate.StoreName" selected="@(selectedCertificate)"></option>
                            continue;
                        }
                        var friendlyName = certificate.FriendlyName;
                        if (string.IsNullOrWhiteSpace(friendlyName) && !string.IsNullOrWhiteSpace(certificate.ThumbPrint))
                        {
                            friendlyName = "No Friendly Name";
                        }
                        <option value="@certificate.ThumbPrint" data-StoreLocation="@certificate.StoreLocation" data-StoreName="@certificate.StoreName" selected="@(selectedCertificate)">
                            @friendlyName [@certificate.NotBefore.ToString("dd/MM/yy") - @certificate.NotAfter.ToString("dd/MM/yy")] @certificate.Subject
                        </option>
                    }
                </select>
                <span class="hint">@T["Select the certificate for signing tokens."]</span>
            }
            else
            {
                <div class="alert alert-warning" asp-validation-for="CertificateThumbPrint">@T["You need to add a certificate to your server for setting up OpenID Connect module."]</div>
            }
        </fieldset>
    </div>

    <h3>Endpoints</h3>
    <fieldset class="form-group" asp-validation-class-for="EnableTokenEndpoint">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="EnableTokenEndpoint" class="form-check-input" />@T["Enable Token Endpoint"]
            </label>
        </div>
        <span class="hint">@T["Enables action /Orchard.OpenId/Access/Token"]</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="EnableAuthorizationEndpoint">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="EnableAuthorizationEndpoint" class="form-check-input" />@T["Enable Authorization Endpoint"]
            </label>
        </div>
        <span class="hint">@T["Enables action /Orchard.OpenId/Access/Authorize"]</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="EnableLogoutEndpoint">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="EnableLogoutEndpoint" class="form-check-input" />@T["Enable Logout Endpoint"]
            </label>
        </div>
        <span class="hint">@T["Enables action /Orchard.OpenId/Access/Logout"]</span>
    </fieldset>

    <fieldset class="form-group" asp-validation-class-for="EnableUserInfoEndpoint">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="EnableUserInfoEndpoint" class="form-check-input" />@T["Enable User Info Endpoint"]
            </label>
        </div>
        <span class="hint">@T["Enables action /Orchard.OpenId/Access/Userinfo"]</span>
    </fieldset>

    <h3>Flows</h3>

    <fieldset class="@("form-group" + (Model.EnableTokenEndpoint && Model.EnableAuthorizationEndpoint ? "" : " collapse"))" asp-validation-class-for="AllowAuthorizationCodeFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowAuthorizationCodeFlow" class="form-check-input" />@T["Allow Authorization Code Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth">http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth</a></span>
    </fieldset>

    <fieldset class="@("form-group" + (Model.EnableTokenEndpoint && Model.EnableAuthorizationEndpoint ? "" : " collapse"))" asp-validation-class-for="AllowHybridFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowHybridFlow" class="form-check-input" />@T["Allow Hybrid Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth">http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth</a></span>
    </fieldset>

    <fieldset class="@("form-group" + (Model.EnableAuthorizationEndpoint ? "" : " collapse"))" asp-validation-class-for="AllowImplicitFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowImplicitFlow" class="form-check-input" />@T["Allow Implicit Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth">http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth</a></span>
    </fieldset>

    <fieldset class="@("form-group" + (Model.EnableTokenEndpoint ? "" : " collapse"))" asp-validation-class-for="AllowPasswordFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowPasswordFlow" class="form-check-input" />@T["Allow Password Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="https://tools.ietf.org/html/rfc6749#section-1.3.3">https://tools.ietf.org/html/rfc6749#section-1.3.3</a></span>
    </fieldset>

    <fieldset class="@("form-group" + (Model.EnableTokenEndpoint && (Model.AllowPasswordFlow || Model.AllowAuthorizationCodeFlow || Model.AllowHybridFlow) ? "" : " collapse"))" asp-validation-class-for="AllowRefreshTokenFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowRefreshTokenFlow" class="form-check-input" />@T["Allow Refresh Token Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens">http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens</a></span>
    </fieldset>

    <fieldset class="@("form-group" + (Model.EnableTokenEndpoint ? "" : " collapse"))" asp-validation-class-for="AllowClientCredentialsFlow">
        <div class="form-check">
            <label class="form-check-label">
                <input asp-for="AllowClientCredentialsFlow" class="form-check-input" />@T["Allow Client Credentials Flow"]
            </label>
        </div>
        <span class="hint">@T["More info:"] <a href="https://tools.ietf.org/html/rfc6749#section-1.3.4">https://tools.ietf.org/html/rfc6749#section-1.3.4</a></span>
    </fieldset>

<script at="Foot" type="text/javascript">
    //<![CDATA[
    $("a > input.form-check-input").on("click", function (e) {
        e.stopPropagation();    
        $(this).parent().trigger("click");
    })    
    $("#AccessTokenFormat").change(function () {
        var selector = "#Hint_AccessTokenFormat";
        $(".hint" + this.id + ":not(" + selector + ")").collapse("hide");
        $(selector).collapse("show");      
    });

    $("#CertificateThumbPrint").children("option").hide();
    $("#CertificateThumbPrint").children("option[data-StoreLocation=" + $("#CertificateStoreLocation").val() + "][data-StoreName=" + $("#CertificateStoreName").val() + "]").show();

    $("#CertificateStoreLocation").change(function () {
        $("#CertificateThumbPrint").children("option").hide();
        $("#CertificateThumbPrint").children("option[data-StoreLocation=" + $(this).val() + "][data-StoreName=" + $("#CertificateStoreName").val() + "]").show();
    });
    $("#CertificateStoreName").change(function () {
        $("#CertificateThumbPrint").children("option").hide();
        $("#CertificateThumbPrint").children("option[data-StoreLocation=" + $("#CertificateStoreLocation").val() + "][data-StoreName=" + $(this).val() + "]").show();
    });
    $("#EnableTokenEndpoint").change(function () {
        var allowPasswordFlow = $("#AllowPasswordFlow");
        var allowClientCredentialsFlow = $("#AllowClientCredentialsFlow");
        var showOrHide = $(this).is(':checked') ? "show" : "hide";
        allowPasswordFlow.parent().parent().parent().collapse(showOrHide);
        allowClientCredentialsFlow.parent().parent().parent().collapse(showOrHide);

        if (!$(this).is(":checked")) {
            allowPasswordFlow.prop("checked", false);
            allowClientCredentialsFlow.prop("checked", false);
        }
    });
    $("#EnableTokenEndpoint, #EnableAuthorizationEndpoint, #AllowPasswordFlow, #AllowAuthorizationCodeFlow, #AllowHybridFlow").change(function () {
        refreshAllowAuthorizationCodeFlowAndHybridFlowVisibility();
        refreshAllowRefreshTokenFlowVisibility();
    });
    $("#EnableAuthorizationEndpoint").change(function () {
        var allowImplicitFlow = $("#AllowImplicitFlow");
        allowImplicitFlow.parent().parent().parent().collapse($(this).is(":checked") ? "show" : "hide");
        if (!$(this).is(':checked')) {
            allowImplicitFlow.prop("checked", false);
        }
    });

    function refreshAllowAuthorizationCodeFlowAndHybridFlowVisibility() {
        var allowAuthorizationCodeFlow = $("#AllowAuthorizationCodeFlow");
        var allowHybridFlow = $("#AllowHybridFlow");
        if ($("#EnableTokenEndpoint").is(":checked") && $("#EnableAuthorizationEndpoint").is(":checked")) {
            allowAuthorizationCodeFlow.parent().parent().parent().collapse("show");
            allowHybridFlow.parent().parent().parent().collapse("show");
        }
        else {
            allowAuthorizationCodeFlow.parent().parent().parent().collapse("hide");
            allowAuthorizationCodeFlow.prop("checked", false);
            allowHybridFlow.parent().parent().parent().collapse("hide");
            allowHybridFlow.prop("checked", false);
        }
    }
    function refreshAllowRefreshTokenFlowVisibility() {
        var allowRefreshTokenFlow = $("#AllowRefreshTokenFlow");
        if ($("#EnableTokenEndpoint").is(":checked")
            && ($("#AllowPasswordFlow").is(":checked") || $("#AllowAuthorizationCodeFlow").is(":checked") || $("#AllowHybridFlow").is(":checked"))) {
            allowRefreshTokenFlow.parent().parent().parent().collapse("show");
        }
        else {
            allowRefreshTokenFlow.parent().parent().parent().collapse("hide");
            allowRefreshTokenFlow.prop("checked", false);
        }
    }
//]]>
</script>